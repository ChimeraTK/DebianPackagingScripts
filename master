#!/bin/bash -e
cd "$(dirname "$0")"
full_cmdline="$*"

source functions.sh

# master shell script for creating debian packages for multiple packages, with proper reverse-dependency checking
# and other safetly checks.

# function to ask a question (first parameter) and expect a y/n answer from the user. If the user answers with anything
# other than y, the script will terminate.
function ask() {
  echo ""
  echo -n "$1 "
  read -r answer
  if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
    echo "Aborted."
    false
  fi
}

# function to check if an array (first parameter - just the name without $) contains a value (second parameter)
function hasValue() {
  arrayname="$1[@]"
  for val in "${!arrayname}"; do
    if [ "$val" == "$2" ]; then
      return 0  # True
    fi
  done
  return 1  # False
}

function showHelp() {
  echo "Usage: ./master [--preseed|-p] <distribution_codename> <package_name1> <package_version1> [<package_name2> <package_version2>] [...]"
  echo "Example: ./master noble chimeratk-deviceaccess 03.16.00 qthardmon latest"
  echo ""
  echo "Specifying 'latest' as a version will build the greatest version (see sort -V) found on the source repository."
}

## check prerequisites ##
PREREQS_OK=1
if ! which pbuilder > /dev/null ; then
  echo "ERROR: pbuilder was not found. Please install it first by running:"
  PREREQS_OK=0
fi
# check for dh_make
if ! which dh_make > /dev/null ; then
  echo "ERROR: dh_make was not found. Please install it first by running:"
  PREREQS_OK=0
fi
# check for dh_dkms
if ! which dh_dkms > /dev/null ; then
  echo "ERROR: dh_dkms was not found. Please install it first by running:"
  PREREQS_OK=0
fi
# check for dh_python3
if ! which dh_python3 > /dev/null ; then
  echo "ERROR: dh_python3 was not found. Please install it first by running:"
  PREREQS_OK=0
fi
# check for Python module packaging used in configureRelease for version comparison
if ! python3 -m packaging.version > /dev/null ; then
  echo "ERROR: python package 'packaging' not found."
  PREREQS_OK=0
fi

if [ "$PREREQS_OK" != "1" ]; then
  echo "Need to install the following prerequisitions:"
  echo apt-get install pbuilder dh-make dh-dkms dh-python python3-packaging
  apt-get install -s pbuilder dh-make dh-dkms dh-python python3-packaging
  echo ""
  read -r -n1 -p "Proceed installing these packages (y/n)? " ANSWER
  echo ""
  if [ "$ANSWER" != "y" ] && [ "$ANSWER" != "Y" ]; then
    echo "Cannot proceed without prerequisitions."
    exit 1
  fi
  sudo apt-get install pbuilder dh-make dh-dkms dh-python python3-packaging
fi

use_preseed_repository=0
force_new_buildnumber=""
# check command line arguments
options=$(getopt -l "preseed,force-new-buildnumber,help" -o "p,h" -a -- "$@")
eval set -- "$options"

while true; do
    case $1 in
        -h|--help)
            showHelp
            exit 0
            ;;
        -p|--preseed)
            use_preseed_repository=1
            ;;
        --force-new-buildnumber)
            force_new_buildnumber="--force-new-buildnumber "
            echo ">> Incrementing the build number has been forced for *all* packages which are being built! <<"
            ;;
        --)
            shift
            break;;
    esac
    shift
done

if [ $# -lt 3 ] || [ $(($#%2)) -eq 0 ]; then
    showHelp
  exit 1
fi

echo "Active overides:"
if [ -n "$AUTOCLEAN" ]; then
    echo -e "Will remove all temporary and uncommited data: \033[0;31myes\033[0m"
fi

if [ -n "$SKIP_PBUILDER_UPDATE" ]; then
    echo -e "Will update pbuilder: \033[0;31mno\033[0m"
fi

if [ -n "$AUTOCLEAN" ]; then
    echo "Script will remove all temporary and uncommited data. Press Ctrl-C stop the script"
    secs=10
    while [ $secs -ge 0 ]; do
        echo -en "\rContinuing in $secs...\033[0K"
        sleep 1
        : $((secs--))
    done
    echo
fi

if [ -n "$AUTOSTART" ]; then
    echo -e "Will start build without question: \033[0;31myes\033[0m"
fi

if [ -n "$AUTOPUBLISH" ]; then
    echo -e "Will \033[0;31mPUBLISH\033[0m final packages without question: \033[0;31myes\033[0m"
fi

# check for other unfinished operations
NEED_CLEANUP=0
CONTINUE_BUILD=0
if [ -e "master-control" ]; then
  echo "You file 'master-control' exists. Are you running another instance of this script in the same directory?"
  NEED_CLEANUP=1
fi
if [ -s "pbuilder-result" ]; then
  echo "You still have packages in the pbuilder-result directory."
  NEED_CLEANUP=1
fi
if [ -e "debian_package" ]; then
  echo "The directory 'debian_package' exists. Are you currently building a package in this directory?"
  NEED_CLEANUP=1
fi
if [ "$NEED_CLEANUP" == "1" ]; then
  echo ""
  echo -n "Do you want to remove any leftovers from the previous (or current!?) run [y], try to continue the previous build [c], or abort [n] (y/c/N)? "
  if [ -z "$AUTOCLEAN" ] ; then
      read -r answer
  else
      answer="y"
      echo "y (AUTOCLEAN set)"
  fi
  if [ "$answer" == "c" ] || [ "$answer" == "C" ]; then
    echo ""
    echo " **************************************************"
    echo " ***  Trying to continue the last build chain.  ***"
    echo " ***  This feature has not been well tested.    ***"
    echo " ***  Please double check the result before     ***"
    echo " ***  publishing the packages!                  ***"
    echo " ***  Report any issues immediately!            ***"
    echo " **************************************************"
    echo ""
    echo -n "Waiting for 2 seconds before proceeding."
    for ((i=0; i<2; i++)); do
      sleep 1
      echo -n .
    done
    echo ""
    CONTINUE_BUILD=1
  elif [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
    echo ""
    echo "Aborted."
    false
  else
    rm -rf pbuilder-result debian_package master-control
    echo ""
  fi
fi

# check for local modifications in the DebianBuildVersions directory
do_not_publish=0
if [ $CONTINUE_BUILD != 1 ]; then
  ./checkIfBuildVersionsCommitted || do_not_publish=1
fi
if [ $do_not_publish == 1 ]; then
  echo ""
  echo -n "Continue anyway or reset the DebianBuildVersions directory (y/r/N)? "
  if [ -z "$AUTOCLEAN" ] ; then
    read -r answer
  else
    answer="r"
  fi
  if [ "$answer" = "r" ] || [ "$answer" = "R" ]; then
    echo ""
    echo "*** ATTENTION ***"
    echo "All modifications to the DebianBuildVersions directory including new files will be lost irreversible!"
    if [ -z "$AUTOCLEAN" ] ; then
      ask "Do you really want to reset the DebianBuildVersions directory (y/N)? "
    fi
    ( cd DebianBuildVersions ; git reset --hard ; git clean -f -d )
    do_not_publish=0
    ./checkIfBuildVersionsCommitted || do_not_publish=1
    if [ $do_not_publish == 1 ]; then
      echo "Sorry, automatic cleaning did not work."
    else
      echo "The DebianBuildVersions directory has been cleaned successfully."
    fi
  elif [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
    echo "Aborted."
    false
  fi
fi

# obtain distribution code name
distribution="$1"
arch="amd64"      # note: changing this has not been tested!
shift

# continue build: read previous master-control file
if [ $CONTINUE_BUILD == 1 ]; then
  source master-control
  if [ "$cmdline" != "$full_cmdline" ]; then
    echo "Cannot continue build, the command line arguments passed are not identical to the last run."
    echo "Old arguments were: $cmdline"
    echo "New arguments are: $full_cmdline"
    exit 1
  fi
fi

if [ $do_not_publish == 1 ]; then
    ask "Publishing this build will not be possible. Do you still want to continue? (y/N)"
fi

# create the master control file
if [ $CONTINUE_BUILD != 1 ]; then
  {
    echo "cmdline='$full_cmdline'"
    echo "do_not_publish=${do_not_publish}"
    echo "distribution=${distribution}"
    echo "arch=${arch}"
    echo "declare -A package_buildcmd"
    echo "use_preseed_repository=${use_preseed_repository}"
  } > master-control
fi

# checkout or update the control git repository
source config.sh
if [ ! -d "DebianBuildVersions" ]; then
  git clone -q "$DebianBuildVersionsURI" DebianBuildVersions
else
  cd DebianBuildVersions
  git pull -q --no-rebase
  cd ..
fi

# create list of packages to build from command line arguments
declare -A package_list        # associative array: package name -> package version
while [ -n "$1" ]; do
  package_list["$1"]="$2"
  shift ; shift
done

# search for reverse dependencies of dev packages
echo "Searching for reverse dependencies..."
for package in "${!package_list[@]}"; do
  # obtain possible reverse dependencies for lib${package}-dev
  TEMPFILE=$( mktemp )
  # Let 'set -e' check if 'findReverseDependencies' fails; don't care about the rest of the pipeline
  # (Cannot use 'set -o pipefail', as that would break other stuff in this script)
  DEPENDENCIES_RESULT=$(./findReverseDependencies "lib${package}-dev" "$distribution" "$DebianRepository" $arch)
  echo "${DEPENDENCIES_RESULT}" | grep "^lib" | grep -- "-dev " | sed -e 's/^lib//' -e 's/-dev / /' -e '/^[[:space:]]*$/d' > "$TEMPFILE"
  # DeviceAccess is special case: also build all packages depending on 'libchimeratk-deviceaccess', not just libs but also e.g qthardmon
  if [ "${package}" = "chimeratk-deviceaccess" ]; then
    DEPENDENCIES_RESULT2=$(./findReverseDependencies "lib${package}$" "$distribution" "$DebianRepository" $arch)
    echo "${DEPENDENCIES_RESULT2}" | grep -v -- "-dbgsym " | sed -e 's/^lib//' -e 's/-dev / /' -e '/^[[:space:]]*$/d' >> "$TEMPFILE"
  fi
  readarray revdeps_with_versions < "$TEMPFILE"
  rm -f "$TEMPFILE"
  # loop over any found reverse dependencies
  for revdep_with_version in "${revdeps_with_versions[@]}" ; do
    revdep_name=$( echo "${revdep_with_version}" | sed -e 's/ .*$//' )
    revdep_version=$( echo "${revdep_with_version}" | sed -e 's/^.* //' )
    if [ -z "${package_list[$revdep_name]+abc}" ]; then
      # package not yet in the list: add it
      package_list["${revdep_name}"]="${revdep_version}"
    fi
  done
done

# check versions and deal with "latest" version spec
echo "Verifying versions..."
for package in "${!package_list[@]}"; do
  if [ ! -d "DebianBuildVersions/${package}" ]; then
    echo "Skipping ${package}, seems to be an external package..."
    continue
  fi
  REPO=$( getConfigValue "DebianBuildVersions/${package}" "${distribution}" SourceURI )
  if [ "${package_list["${package}"]}" == "latest" ]; then
    package_list["${package}"]=$( git ls-remote --tags ${REPO} | sed -e 's_^.*refs/tags/__' | grep -v "\^{}$" | sort -V | tail -1 )
  else
    VERSION_OK=0
    for version in $( git ls-remote --tags ${REPO} | sed -e 's_^.*refs/tags/__' | grep -v "\^{}$" ); do
      if [ "${package_list["${package}"]}" == $version ]; then
        VERSION_OK=1
      fi
    done
    if [ $VERSION_OK == 0 ]; then
      rm master-control
      echo "*** ERROR: Version ${package_list["${package}"]} of package ${package} is not found on the repository!"
      exit 1
    fi
  fi
done

# sort package list so dependencies are built first
echo "Sorting package list..."
declare -a package_build_order  # non-associative array so we have a well-defined order
for package in "${!package_list[@]}"; do    # fill array initially with package names from the list
  package_build_order+=("$package")
done
sorting_done=0
while [ "$sorting_done" == "0" ]; do
  declare -a package_build_order_sort
  sorting_done=1
  for package in "${package_build_order[@]}"; do
    # check if the package has a config. If not print a warning and ignore it
    if ! [ -e DebianBuildVersions/$package/CONFIG ]; then
      echo "No config for '$package' found. No packages for this project will be built."
      continue
    fi
    # add the dependencies of the package to the new list, if not yet present
    DEPENDENCIES=$( getConfigValue "DebianBuildVersions/${package}" "${distribution}" Dependencies )
    for dependency in $DEPENDENCIES; do
      dependency_packagename=$( echo $dependency | sed -e 's|^lib||' | sed -e 's|-dev$||' | sed -e 's|#epoch.*#||' )
      if hasValue package_build_order "$dependency_packagename" ; then
        if ! hasValue package_build_order_sort "$dependency_packagename" ; then
          sorting_done=0
          package_build_order_sort+=("$dependency_packagename")
        fi
      fi
    done
    # add the package itself to the new list, if not yet present
    if ! hasValue package_build_order_sort "$package" ; then
      package_build_order_sort+=("$package")
    fi
  done
  # move the new list into the old list("${a[@]}")
  unset package_build_order
  declare -a package_build_order
  for package in "${package_build_order_sort[@]}"; do
    package_build_order+=("$package")
  done
  unset package_build_order_sort
done

# read backlist (packages for which the build is skipped)
declare -A BLACKLIST
if [ -f blacklist ]; then
  echo "ATTENTION: Blacklist is in effect!"
  while read -r line ; do
    BLACKLIST[$line]="y"
  done < blacklist
fi

# output list of packages to be built
echo ""
echo "The following packages will be built (in that order):"
for package in "${package_build_order[@]}"; do
  echo -n "$package ${package_list[$package]}"
  if [ -n "${package_buildcmd[$package]}" ]; then
    echo -n " [already done]"
  elif [ -n "${BLACKLIST[$package]}" ]; then
    echo -n " [*** BLACKLISTED ***]"
  fi
  echo ""
done

# ask if we want to proceed (unless AUTOSTART env variable has been set)
if [ -z "${AUTOSTART}" ]; then
  ask "Do you want to proceed with configuring and building the packages in the given versions (y/N)?" || ( if [ $CONTINUE_BUILD != 1 ]; then rm master-control; fi ; exit 1 )
fi

# gain root rights. This (likely) avoids the need to type the password later in the middle of the build step
sudo echo "We have root rights now."

# configure and build packages
TEMPFILE=$( mktemp )
declare -A package_buildcmd        # associative array: package name -> command to build the package
for package in "${package_build_order[@]}"; do
  if [ -n "${package_buildcmd[$package]}" ]; then
    echo "Package $package has already been built, continuing with next package..."
    continue
  elif [ -n "${BLACKLIST[$package]}" ]; then
    echo "Package $package is blacklisted, continuing with next package..."
    continue
  fi
  echo ""
  echo -e "\033[34;1mConfiguring $package in version ${package_list[$package]} for ${distribution}...\033[0m"
  # update pbuilder chroot environment (needed for every package, since dependencies might be added)
  if [ -z "$SKIP_PBUILDER_UPDATE" ] ; then
      ./helper_compress_output.sh ./updatePBuilder "$distribution" "$DebianRepository"
  fi
  # configure the package (possibly using just built dependencies)
  preseed=""
  if [ "$use_preseed_repository" = "1" ] ; then
      preseed="--use-preseed"
  fi

  # shellcheck disable=SC2086
  ./configureRelease $force_new_buildnumber $preseed "$package" "${package_list[$package]}" "$distribution" "$DebianRepository" "$arch" | tee "$TEMPFILE" ; test "${PIPESTATUS[0]}" -eq 0
  package_buildcmd[$package]=$( tail -n1 "$TEMPFILE" )
  echo ""
  # actually build the package
  echo -e "\033[34;1mBuilding $package in version ${package_list[$package]} for ${distribution}...\033[0m"
  # shellcheck disable=SC2086
  ./helper_compress_output.sh ${package_buildcmd[$package]}
  # put buildcmd into master-control file
  echo "package_buildcmd[$package]=\"${package_buildcmd[$package]}\"" >> master-control
  # check consistency of the package
  echo ""
  echo -e "\033[34;1mChecking $package in version ${package_list[$package]} for ${distribution}...\033[0m"
  ./checkPackageConsistency "$package"
done
rm "$TEMPFILE"

# run validation
echo ""
echo -e "\033[34;1mValidating all built packages...\033[0m"
./validation

# committing build versions and publish packages
source master-control       # might be changed e.g. during configureRelease
if [ $do_not_publish -eq 0 ]; then
  echo "You can find the packages in the following directory: pbuilder-result/dists/${distribution}/main/binary-${arch}"
  if [ -z "${AUTOPUBLISH}" ]; then
    # before asking a question now let's clear the input buffer (at least up to 10000 chars) so we don't accidentally abort.
    # shellcheck disable=SC2034
    read -r -t 1 -n 10000 discard || true
    ask "Publish the build versions to git and the packages to the DESY Debian repositories (y/N)?"
  fi
  ./commitDebianBuildVersions
  ./publishDebianPackages
else
  echo "Publication of packages is disallowed. You can find the packages in the following directory: pbuilder-result/dists/${distribution}/main/binary-${arch}"
fi
