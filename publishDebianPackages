#!/bin/bash -e

WD=`pwd`

source functions.sh
# load configuration
source config.sh

# load master-control file
if [ ! -f master-control ]; then
    echo "No master_control file found. Run the master script first."
    exit 1
fi
source master-control
PackageArchive=`eval echo $PackageArchive`

# check for local modifications in the DebianBuildVersions directory
${WD}/checkIfBuildVersionsCommitted || exit 1

# Check that there are debian packages and return an error if not
if [ ! -d pbuilder-result ]; then
    echo "No pbuilder-result directory found. Run the master script first."
    exit 1
fi
PBUILDER_RESULTS_DIR="${WD}/pbuilder-result/dists/${distribution}/main/binary-${arch}"
cd "${PBUILDER_RESULTS_DIR}"

# check that none of the packages already exists in the repositories
wget -q "http://doocspkgs.desy.de/pub/doocs/dists/${distribution}/main/binary-${arch}/Packages" -O "${WD}/Packages.DESY"
for debfile in *.deb ; do
  if [ -n "`grep \"$debfile\" \"${WD}/Packages.DESY\"`" ]; then
    echo "The package $debfile is currently already in the Debian repository. Publication is not allowed!"
    echo "Probably someone else published packages in parallel with you. In this case, delete the local changes in the DebianBuildVersions repository and start the entire package building process from the beginnin!"
    exit 1
  fi
done

# actually perform the installation of each package
for package in "${!package_buildcmd[@]}"; do    # loop over all packages in the list (note: this is *not* the list of .deb files but the list of projects!)

  # get the path to the control file from the build command (argument to makeDebianPackage)
  BUILD_CONTROL_DIRECTORY=`echo ${package_buildcmd[$package]} | sed -e "s|^./makeDebianPackage.*Debian|${WD}/Debian|"`
  BUILD_CONTROL_FILE="${BUILD_CONTROL_DIRECTORY}/control"

  # skip if the package has already been published
  NOT_PUBLISHED_FILE="${BUILD_CONTROL_DIRECTORY}/NOT_PUBLISHED"
  if [ ! -f "${NOT_PUBLISHED_FILE}" ]; then
      echo "${NOT_PUBLISHED_FILE} file not found. This package probably is already published. Skipping..."
      continue
  fi


  # obtain list of package names from the control file and form wildcards to match the deb files
  PACKAGE_FILES_WILDCARDS_DEB=$(awk 'BEGIN{ORS=" "} /^Package:/{print $2"_*.deb"}' ${BUILD_CONTROL_FILE})

  # derive list of debug packages from this - they are not mentioned in the control files
  PACKAGE_FILES_WILDCARDS_DBGSYM=$(awk 'BEGIN{ORS=" "} /^Package:/{print $2"-dbgsym_*.deb"}' ${BUILD_CONTROL_FILE})

  # New for focal - debug packages have .ddeb suffix now
  PACKAGE_FILES_WILDCARDS_DBGSYM="${PACKAGE_FILES_WILDCARDS_DBGSYM} $(awk 'BEGIN{ORS=" "} /^Package:/{print $2"-dbgsym_*.ddeb"}' ${BUILD_CONTROL_FILE})"

  # Filter dbgsym package names against available packages since they may or may not have been build
  TMPPKG=""
  for p in ${PACKAGE_FILES_WILDCARDS_DBGSYM} ; do
      if ls ${p} >/dev/null 2>&1 ; then
          TMPPKG="${TMPPKG} ${p}"
      fi
  done
  PACKAGE_FILES_WILDCARDS_DBGSYM="${TMPPKG}"

  # obtain source package name from the control file and form wildcards to match the changes file
  PACKAGE_FILES_WILDCARDS_CHANGES=$(awk 'BEGIN{ORS=" "} /^Source:/{print $2"_*.changes"}' ${BUILD_CONTROL_FILE})

  # merge the wildcards
  PACKAGE_FILES_WILDCARDS="${PACKAGE_FILES_WILDCARDS_DEB} ${PACKAGE_FILES_WILDCARDS_CHANGES} ${PACKAGE_FILES_WILDCARDS_DBGSYM}"


  # obtain content of Target-repositories variable from CONFIG file
  TARGET_REPOSITORIES=`getConfigValue "${WD}/DebianBuildVersions/${package}" "${distribution}" Target-repositories`

  # Step 1: Remove an older version of the package
  # -- from the package archive
  # -- from the actual repository
  # This is done by writing a script, copying it to the InstallHost and executing it there.
  echo "${PACKAGE_FILES_WILDCARDS_DEB}"
  echo "${PACKAGE_FILES_WILDCARDS_DBGSYM}"
  TEMPFILE=`mktemp -p .`
  echo "#!/bin/bash -e" > $TEMPFILE
  echo "cd ${PackageArchive}" >> $TEMPFILE
  echo "for p in ${PACKAGE_FILES_WILDCARDS_CHANGES}; do" >> $TEMPFILE
  echo "  if [ ! -f \"\$p\" ]; then continue ; fi" >> $TEMPFILE
  echo "  echo mv \"\$p\" ../old" >> $TEMPFILE
  echo "  mv \"\$p\" ../old" >> $TEMPFILE
  echo "done" >> $TEMPFILE
  echo "for p in ${PACKAGE_FILES_WILDCARDS_DBGSYM}; do" >> $TEMPFILE
  echo "  if [ ! -f \"\$p\" ]; then continue ; fi" >> $TEMPFILE
  echo "  packname=\`dpkg-deb -f \$p Package\`" >> $TEMPFILE
  echo "  echo mv \"\$p\" ../old" >> $TEMPFILE
  echo "  mv \"\$p\" ../old" >> $TEMPFILE
  for REPO in ${TARGET_REPOSITORIES}; do
    echo "  echo sudo -H reprepro --waitforlock 2 -Vb ${RepositoryDirectories[${REPO}]} remove ${distribution} \"\$packname\"" >> $TEMPFILE
    echo "  sudo -H reprepro --waitforlock 2 -Vb ${RepositoryDirectories[${REPO}]} remove ${distribution} \"\$packname\"" >> $TEMPFILE
  done
  echo "done" >> $TEMPFILE
  echo "for p in ${PACKAGE_FILES_WILDCARDS_DEB}; do" >> $TEMPFILE
  echo "  if [ ! -f \"\$p\" ]; then continue ; fi" >> $TEMPFILE
  echo "  packname=\`dpkg-deb -f \$p Package\`" >> $TEMPFILE
  echo "  echo mv \"\$p\" ../old" >> $TEMPFILE
  echo "  mv \"\$p\" ../old" >> $TEMPFILE
  for REPO in ${TARGET_REPOSITORIES}; do
    echo "  echo sudo -H reprepro --waitforlock 2 -Vb ${RepositoryDirectories[${REPO}]} remove ${distribution} \"\$packname\"" >> $TEMPFILE
    echo "  sudo -H reprepro --waitforlock 2 -Vb ${RepositoryDirectories[${REPO}]} remove ${distribution} \"\$packname\"" >> $TEMPFILE
  done
  echo "done" >> $TEMPFILE
  echo "rm \$HOME/$TEMPFILE" >> $TEMPFILE
  chmod +x $TEMPFILE
  scp $TEMPFILE ${InstallHost}:$TEMPFILE
  ssh ${InstallHost} $TEMPFILE
  rm $TEMPFILE

  # Step 2: Copy the files to the package archive
  scp ${PACKAGE_FILES_WILDCARDS} ${InstallHost}:${PackageArchive}
  # Step 3: Install to the repository
  for REPO in ${TARGET_REPOSITORIES}; do
      PUBLISH_FILES_WILDCARDS="${PACKAGE_FILES_WILDCARDS_DEB} ${PACKAGE_FILES_WILDCARDS_DBGSYM}"
      for FILE in ${PUBLISH_FILES_WILDCARDS} ; do
          ssh ${InstallHost} sudo -H reprepro --ignore=extension --waitforlock 2 -Vb \
              ${RepositoryDirectories[${REPO}]} includedeb ${distribution} \
              ${PackageArchive}/${FILE}
     done
  done

  # Remove just installed files from the local pbuilder-result directory
  rm ${PACKAGE_FILES_WILDCARDS}

  # Remove the file inicating that the package needs to be published
  cd "${WD}/DebianBuildVersions"
  git rm "${NOT_PUBLISHED_FILE}"
  PACKAGE_AND_VERSION=`echo ${package_buildcmd[$package]} | sed -e "s|^\./makeDebianPackage DebianBuildVersions/||"`
  git commit -m "automated commit: successfully published ${PACKAGE_AND_VERSION}"
  # There should be no merge conflict here. The commitDebianBuildVersions script
  # prevents multiple scripts accessing this NOT_PUBLISHED file.
  git pull --rebase
  git push
  cd "${PBUILDER_RESULTS_DIR}"
  
done

# Everything installed: remove the entire pbuilder-result directory
cd ${WD}
rm -rf pbuilder-result master-control debian_package

echo "The packages have been published successfully."
