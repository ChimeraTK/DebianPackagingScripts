#!/bin/bash -e

# Shell script to create or update the pbuilder image used in makeDebianPackage

# create directory holding pbuilder images
WD=$(realpath "$(dirname "$0")")
mkdir -p "${WD}/pbuilder-base"

# Parse command line arguments
if [ -z "$1" ] ; then
  # print usage
  echo "Usage:"
  echo "  ./updatePBuilder <distributionCodeName>"
  echo "     - Update the image for the given distribution. If no image exists, create it first."
  echo ""
  echo "  ./updatePBuilder --setup <distributionCodeName>"
  echo "     - Create a fresh image for the given distribution, even if it exists already."
  exit 1
elif [ "$1" == "--setup" ] ; then
  if [ -z "$2" ] ; then
    echo "Missing parameter to --setup"
    exit 1
  fi
  DISTRIBUTION=$2
  rm -rf "pbuilder-base/base-${DISTRIBUTION}.tgz"
else
  DISTRIBUTION=$1
fi

# load configuration
# shellcheck disable=SC1091
source "${WD}/config.sh"

# form the file name of the image
PBUILDER_IMAGE="${WD}/pbuilder-base/base-${DISTRIBUTION}.tgz"

# build the mirror list including the local repository
LOCAL_REPOS=${WD}/pbuilder-result
mkdir -p "${LOCAL_REPOS}/dists/${DISTRIBUTION}/main/binary-amd64"
touch "${LOCAL_REPOS}/dists/${DISTRIBUTION}/main/binary-amd64/Packages"

# if image does not exist, create it first
if [ ! -f "${PBUILDER_IMAGE}" ]; then
  sudo pbuilder --create --distribution "$DISTRIBUTION" --mirror "${MIRROR}" --basetgz "${PBUILDER_IMAGE}" --extrapackages "${INITIALPACKAGESLIST}" --basetgz "${PBUILDER_IMAGE}" --othermirror "${INITIALEXTRAMIRROR}"|| exit 1

  # Execute a script inside the pbuilder chroot environment to set it up properly for our needs:
  # - Make sure the local package repository gets priority. Not sure how this works and if it's realy correct. Found
  #   this solution here: http://askubuntu.com/questions/135339/assign-highest-priority-to-my-local-repository
  # - Also fix the problem that /run/shm is a symlink to /dev/shm and will be incorrectly mounted by pbuilder.
  # - add the user doocsadm which is needed for the doocs server packages (and their postinst scripts)
  SCRIPT=$(mktemp -p "${LOCAL_REPOS}")  # must be in the pbuilder-result directory, since it is bind-mounted in the pbuilder environment
  cat > "$SCRIPT" <<EOF
#!/bin/bash -e
# fix for debian to allow apt repos without signature:
echo 'APT { Get { AllowUnauthenticated "1"; }; };'>/etc/apt/apt.conf.d/99allow_unauth
echo 'Package: *' > /etc/apt/preferences
echo 'Pin: origin ""' >> /etc/apt/preferences
echo 'Pin-Priority: 1001' >> /etc/apt/preferences
if [ -L /run/shm ]; then
  rm /run/shm
  mkdir /run/shm
fi
groupadd doocsadm
useradd -m -g doocsadm doocsadm
EOF
  sudo pbuilder --execute --distribution "${DISTRIBUTION}" --override-config --components "main ${ADDITIONALREPO}"    \
                --othermirror "${MIRRORLIST}"  --save-after-exec                                                      \
                --basetgz "${PBUILDER_IMAGE}" --bindmounts "${LOCAL_REPOS}" "${SCRIPT}"
fi

# On Bookwork only: configure g++13 to be the default compiler
if [ "${DISTRIBUTION}" == "bookworm" ]; then
    SCRIPT2=$(mktemp -p "${LOCAL_REPOS}")  # must be in the pbuilder-result directory, since it is bind-mounted in the pbuilder environment
    cat > "$SCRIPT2" <<EOF
#!/bin/bash -e
# install g++13 and configure it to be the default compiler
apt-get install -y g++-13
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 13
update-alternatives --set gcc /usr/bin/gcc-13
update-alternatives --set g++ /usr/bin/g++-13
EOF
    sudo pbuilder --execute --distribution "${DISTRIBUTION}" --override-config --components "main ${ADDITIONALREPO}" \
                  --othermirror "${MIRRORLIST}"  --save-after-exec                                                   \
                  --basetgz "${PBUILDER_IMAGE}" --bindmounts "${LOCAL_REPOS}" "${SCRIPT2}"
fi

# update local repositories, if build process on-going
if [ -f "${WD}/master-control" ]; then
  "${WD}/updateLocalRepos"
fi

# update the pbuilder chroot environment
sudo pbuilder --update                                                                                                \
              --distribution "${DISTRIBUTION}"                                                                        \
              --mirror "${MIRROR}"                                                                                    \
              --override-config                                                                                       \
              --components "main ${ADDITIONALREPO}"                                                                   \
              --othermirror "${MIRRORLIST}"                                                                           \
              --hookdir "${WD}/pbuilder-hooks"                                                                        \
              --basetgz "${PBUILDER_IMAGE}"                                                                           \
              --bindmounts "${LOCAL_REPOS}"         || exit 1

echo "pbuilder chroot environment successfully updated."
